{"version":3,"file":"unsplash-js.esm.js","sources":["../src/helpers/typescript.ts","../src/helpers/fp.ts","../src/helpers/errors.ts","../src/helpers/json.ts","../src/helpers/response.ts","../src/helpers/url.ts","../src/helpers/request.ts","../src/helpers/feed.ts","../src/helpers/query.ts","../src/methods/collections/index.ts","../src/methods/photos/index.ts","../src/methods/search/index.ts","../src/methods/users/index.ts","../src/beacon.ts","../src/methods/search/types.ts","../src/types/request.ts","../src/index.ts"],"sourcesContent":["// Copied from https://github.com/Microsoft/TypeScript/issues/1897#issuecomment-338650717\nexport type AnyJson = boolean | number | string | null | JsonArray | JsonMap;\nexport type JsonMap = { [key: string]: AnyJson };\nexport type JsonArray = Array<AnyJson>;\n\nexport const checkIsString = getRefinement(\n  (value: unknown): Nullable<string> => (typeof value === 'string' ? value : null),\n);\n\n/**\n * https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-377567046\n */\nexport type OmitStrict<T, K extends keyof T> = Omit<T, K>;\n\n/**\n * Unlike TypeScript's `NonNullable`, this does _not_ include `undefined`\n */\nexport type Nullable<T> = T | null;\n\nexport const isDefined = <T>(x: T | null | undefined): x is T => x !== null && x !== undefined;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\ntype Refinement<A, B extends A> = (a: A) => a is B;\nexport function getRefinement<A, B extends A>(getB: (a: A) => Nullable<B>): Refinement<A, B> {\n  return (a: A): a is B => isDefined(getB(a));\n}\n\nexport const checkIsNonEmptyArray = <T>(a: T[]): a is NonEmptyArray<T> => a.length > 0;\n","import { isDefined } from './typescript';\n\n/** Takes a dictionary containing nullish values and returns a dictionary of all the defined\n * (non-nullish) values.\n */\nexport const compactDefined = <A>(obj: Record<string, A | null | undefined>) =>\n  Object.keys(obj).reduce<Record<string, A>>((acc, key) => {\n    const value = obj[key];\n    return {\n      ...acc,\n      ...(isDefined(value) ? { [key]: value } : {}),\n    };\n  }, {});\n\n/**\n * copied from `fp-ts`\n * https://github.com/gcanti/fp-ts/blob/70190b5a03ddc2d31b4708c75c6dfad81d0bfa21/perf/function/flow.tÂ¡s\n */\nexport function flow<A extends Array<unknown>, B>(ab: (...a: A) => B): (...a: A) => B;\nexport function flow<A extends Array<unknown>, B, C>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n): (...a: A) => C;\nexport function flow<A extends Array<unknown>, B, C, D>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (b: C) => D,\n): (...a: A) => D;\nexport function flow(...fns: Array<Function>): Function {\n  const len = fns.length - 1;\n  return function(this: any, ...x: Array<any>) {\n    let y = fns[0].apply(this, x);\n    for (let i = 1; i <= len; i++) {\n      y = fns[i].call(this, y);\n    }\n    return y;\n  };\n}\n","import {\n  AnyJson,\n  checkIsString,\n  getRefinement,\n  isDefined,\n  checkIsNonEmptyArray,\n  JsonMap,\n  NonEmptyArray,\n  Nullable,\n} from './typescript';\n\nexport type Errors = NonEmptyArray<string>;\nexport type ErrorSource = 'api' | 'decoding';\n\nconst checkIsObject = getRefinement(\n  (response: AnyJson): Nullable<JsonMap> =>\n    isDefined(response) && typeof response === 'object' && !Array.isArray(response)\n      ? response\n      : null,\n);\n\nconst checkIsErrors = getRefinement(\n  (errors: AnyJson): Nullable<Errors> =>\n    Array.isArray(errors) && errors.every(checkIsString) && checkIsNonEmptyArray(errors)\n      ? errors\n      : null,\n);\n\nconst checkIsApiError = getRefinement(\n  (response: AnyJson): Nullable<{ errors: Errors }> =>\n    checkIsObject(response) && 'errors' in response && checkIsErrors(response.errors)\n      ? { errors: response.errors }\n      : null,\n);\n\nexport const getErrorForBadStatusCode = (\n  jsonResponse: AnyJson,\n): { errors: Errors; source: ErrorSource } => {\n  if (checkIsApiError(jsonResponse)) {\n    return { errors: jsonResponse.errors, source: 'api' };\n  } else {\n    return {\n      errors: [\n        'Responded with a status code outside the 2xx range, and the response body is not recognisable.',\n      ],\n      source: 'decoding',\n    };\n  }\n};\n\nexport class DecodingError {\n  constructor(readonly message: string) {}\n}\n","import * as ContentTypeHelpers from 'content-type';\nimport { DecodingError } from './errors';\nimport { AnyJson, isDefined } from './typescript';\n\nconst CONTENT_TYPE_RESPONSE_HEADER = 'content-type';\nconst CONTENT_TYPE_JSON = 'application/json';\nconst checkIsJsonResponse = (response: Response) => {\n  const contentTypeHeader = response.headers.get(CONTENT_TYPE_RESPONSE_HEADER);\n\n  return (\n    isDefined(contentTypeHeader) &&\n    ContentTypeHelpers.parse(contentTypeHeader).type === CONTENT_TYPE_JSON\n  );\n};\n\n/**\n * Note: restrict the type of JSON to `AnyJson` so that `any` doesn't leak downstream.\n */\nexport const getJsonResponse = (response: Response): Promise<AnyJson> => {\n  if (checkIsJsonResponse(response)) {\n    return response.json().catch(_err => {\n      throw new DecodingError('unable to parse JSON response.');\n    });\n  } else {\n    throw new DecodingError('expected JSON response from server.');\n  }\n};\n","import { Errors, ErrorSource, getErrorForBadStatusCode, DecodingError } from './errors';\nimport { getJsonResponse } from './json';\n\nexport type ApiResponse<T> =\n  | {\n      type: 'success';\n      response: T;\n      errors?: never;\n      status: number;\n    }\n  | {\n      type: 'error';\n      source: ErrorSource;\n      response?: never;\n      errors: Errors;\n      status: number;\n    };\n\nexport type HandleResponse<T> = (args: { response: Response }) => Promise<T>;\n\nexport const handleFetchResponse = <ResponseType>(handleResponse: HandleResponse<ResponseType>) => (\n  response: Response,\n): Promise<ApiResponse<ResponseType>> =>\n  (response.ok\n    ? handleResponse({ response }).then(\n        (handledResponse): ApiResponse<ResponseType> => ({\n          type: 'success',\n          status: response.status,\n          response: handledResponse,\n        }),\n      )\n    : getJsonResponse(response).then(\n        (jsonResponse): ApiResponse<ResponseType> => ({\n          type: 'error',\n          status: response.status,\n          ...getErrorForBadStatusCode(jsonResponse),\n        }),\n      )\n  ).catch(error => {\n    /**\n     * We want to separate expected decoding errors from unknown ones. We do so by throwing a custom\n     * `DecodingError` whenever we encounter one within `handleFetchResponse` and catch them all\n     * here. This allows us to easily handle all of these errors at once. Unexpected errors are not\n     * caught, so that they bubble up and fail loudly.\n     *\n     * Note: Ideally we'd use an Either type, but this does the job without introducing dependencies\n     * like `fp-ts`.\n     */\n    if (error instanceof DecodingError) {\n      return {\n        type: 'error',\n        source: 'decoding',\n        status: response.status,\n        errors: [error.message],\n      };\n    } else {\n      throw error;\n    }\n  });\n\nexport const castResponse = <T>(): HandleResponse<T> => ({ response }) =>\n  (getJsonResponse(response) as unknown) as Promise<T>;\n","type Query = {\n  [index: string]: string | number | boolean;\n};\n\nexport type BuildUrlParams = {\n  pathname: string;\n  query: Query;\n};\n\nconst addQueryToUrl = (query: Query) => (url: URL) => {\n  Object.keys(query).forEach(queryKey =>\n    url.searchParams.set(queryKey, query[queryKey].toString()),\n  );\n};\n\nconst addPathnameToUrl = (pathname: string) => (url: URL) => {\n  // When there is no existing pathname, the value is `/`. Appending would give us a URL with two\n  // forward slashes. This is why we replace the value in that scenario.\n  if (url.pathname === '/') {\n    url.pathname = pathname;\n  } else {\n    url.pathname += pathname;\n  }\n};\n\nexport const buildUrl = ({ pathname, query }: BuildUrlParams) => (apiUrl: string) => {\n  const url = new URL(apiUrl);\n  addPathnameToUrl(pathname)(url);\n  addQueryToUrl(query)(url);\n  return url.toString();\n};\n\nexport const parseQueryAndPathname = (url: string) => {\n  const { pathname, searchParams } = new URL(url);\n\n  const query: Query = {};\n\n  searchParams.forEach((value, key) => {\n    query[key] = value;\n  });\n\n  return { query, pathname: pathname === '/' ? undefined : pathname };\n};\n","import { flow } from './fp';\nimport { ApiResponse, handleFetchResponse, HandleResponse } from './response';\nimport { isDefined, OmitStrict } from './typescript';\nimport { buildUrl, BuildUrlParams } from './url';\n\ntype FetchParams = Pick<RequestInit, 'method'>;\n/**\n * The params generated by the library\n */\ntype BaseRequestParams = BuildUrlParams &\n  FetchParams &\n  // `headers` is not part of FetchParams because we want to allow headers in the additional params as well\n  Pick<RequestInit, 'headers'>;\n\n/**\n * Additional fetch options provided by the user on a per-call basis\n */\ntype AdditionalPerFetchParams = Omit<RequestInit, keyof FetchParams>;\nexport type CompleteRequestParams = BaseRequestParams & AdditionalPerFetchParams;\ntype HandleRequest<Args> = (\n  a: Args,\n  additionalFetchOptions?: AdditionalPerFetchParams,\n) => CompleteRequestParams;\n\n/**\n * helper used to type-check the arguments, and add default params for all requests\n */\nexport const createRequestHandler = <Args>(\n  fn: (a: Args) => BaseRequestParams,\n): HandleRequest<Args> => (a, additionalFetchOptions = {}) => {\n  const { headers, query, ...baseReqParams } = fn(a);\n\n  return {\n    ...baseReqParams,\n    ...additionalFetchOptions,\n    query,\n    headers: {\n      ...headers,\n      ...additionalFetchOptions.headers,\n    },\n  };\n};\n\n/**\n * Initial parameters that apply to all calls\n */\ntype InitParams = {\n  apiVersion?: string;\n  fetch?: typeof fetch;\n} & OmitStrict<RequestInit, 'method' | 'body'> &\n  ({ accessKey: string; apiUrl?: never } | { apiUrl: string; accessKey?: never });\n\ntype RequestGenerator<Args, ResponseType> = {\n  handleRequest: HandleRequest<Args>;\n  handleResponse: HandleResponse<ResponseType>;\n};\n\ntype GeneratedRequestFunction<Args, ResponseType> = (\n  ...a: Parameters<HandleRequest<Args>>\n) => Promise<ApiResponse<ResponseType>>;\n\ntype InitMakeRequest = (\n  args: InitParams,\n) => <Args, ResponseType>(\n  handlers: RequestGenerator<Args, ResponseType>,\n) => GeneratedRequestFunction<Args, ResponseType>;\n\nexport const initMakeRequest: InitMakeRequest = ({\n  accessKey,\n  apiVersion = 'v1',\n  apiUrl = 'https://api.unsplash.com',\n  headers: generalHeaders,\n  fetch: providedFetch,\n  ...generalFetchOptions\n}) => ({ handleResponse, handleRequest }) =>\n  flow(\n    handleRequest,\n    ({ pathname, query, method = 'GET', headers: endpointHeaders, body, signal }) => {\n      const url = buildUrl({ pathname, query })(apiUrl);\n\n      const fetchOptions: RequestInit = {\n        method,\n        headers: {\n          ...generalHeaders,\n          ...endpointHeaders,\n          'Accept-Version': apiVersion,\n          ...(isDefined(accessKey) ? { Authorization: `Client-ID ${accessKey}` } : {}),\n        },\n        body,\n        signal,\n        ...generalFetchOptions,\n      };\n\n      const fetchToUse = providedFetch ?? fetch;\n\n      return fetchToUse(url, fetchOptions).then(handleFetchResponse(handleResponse));\n    },\n  );\n","import { DecodingError } from './errors';\nimport { HandleResponse, castResponse } from './response';\nimport { isDefined } from './typescript';\n\nconst TOTAL_RESPONSE_HEADER = 'x-total';\nconst getTotalFromApiFeedResponse = (response: Response) => {\n  const totalsStr = response.headers.get(TOTAL_RESPONSE_HEADER);\n  if (isDefined(totalsStr)) {\n    const total = parseInt(totalsStr);\n    if (Number.isInteger(total)) {\n      return total;\n    } else {\n      throw new DecodingError(`expected ${TOTAL_RESPONSE_HEADER} header to be valid integer.`);\n    }\n  } else {\n    throw new DecodingError(`expected ${TOTAL_RESPONSE_HEADER} header to exist.`);\n  }\n};\n\ntype FeedResponse<T> = {\n  results: T[];\n  total: number;\n};\n\nexport const handleFeedResponse = <T>(): HandleResponse<FeedResponse<T>> => ({ response }) =>\n  castResponse<T[]>()({ response }).then(results => ({\n    results,\n    total: getTotalFromApiFeedResponse(response),\n  }));\n","import { PaginationParams } from '../types/request';\nimport { compactDefined } from './fp';\nimport { isDefined } from './typescript';\n\nexport const getCollections = (collectionIds?: string[]) =>\n  isDefined(collectionIds) ? { collections: collectionIds.join() } : {};\n\nexport const getFeedParams = ({ page, perPage, orderBy }: PaginationParams) =>\n  compactDefined({\n    per_page: perPage,\n    order_by: orderBy,\n    page,\n  });\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\n\ntype CollectionId = {\n  collectionId: string;\n};\n\nconst COLLECTIONS_PATH_PREFIX = '/collections';\n\nexport const getPhotos = {\n  handleRequest: createRequestHandler(\n    ({\n      collectionId,\n      orientation,\n      ...paginationParams\n    }: CollectionId & PaginationParams & OrientationParam) => ({\n      pathname: `${COLLECTIONS_PATH_PREFIX}/${collectionId}/photos`,\n      query: compactDefined({ ...Query.getFeedParams(paginationParams), orientation }),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\n\nexport const get = {\n  handleRequest: createRequestHandler(({ collectionId }: CollectionId) => ({\n    pathname: `${COLLECTIONS_PATH_PREFIX}/${collectionId}`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n\nexport const list = {\n  handleRequest: createRequestHandler(\n    (paginationParams: Pick<PaginationParams, 'page' | 'perPage'> = {}) => ({\n      pathname: COLLECTIONS_PATH_PREFIX,\n      query: Query.getFeedParams(paginationParams),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\n\nexport const getRelated = {\n  handleRequest: createRequestHandler(({ collectionId }: CollectionId) => ({\n    pathname: `${COLLECTIONS_PATH_PREFIX}/${collectionId}/related`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { isDefined } from '../../helpers/typescript';\nimport { parseQueryAndPathname } from '../../helpers/url';\nimport { OrientationParam, PaginationParams } from '../../types/request';\n\ntype PhotoId = {\n  photoId: string;\n};\n\nconst PHOTOS_PATH_PREFIX = '/photos';\n\nexport const list = {\n  handleRequest: createRequestHandler((feedParams: PaginationParams = {}) => ({\n    pathname: PHOTOS_PATH_PREFIX,\n    query: compactDefined(Query.getFeedParams(feedParams)),\n  })),\n  handleResponse: handleFeedResponse<any>(),\n};\n\nexport const get = {\n  handleRequest: createRequestHandler(({ photoId }: PhotoId) => ({\n    pathname: `${PHOTOS_PATH_PREFIX}/${photoId}`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n\nexport const getStats = {\n  handleRequest: createRequestHandler(({ photoId }: PhotoId) => ({\n    pathname: `${PHOTOS_PATH_PREFIX}/${photoId}/statistics`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n\nexport const getRandom = {\n  handleRequest: createRequestHandler(\n    ({\n      collectionIds,\n      ...queryParams\n    }: {\n      collectionIds?: string[];\n      featured?: boolean;\n      username?: string;\n      query?: string;\n      count?: number;\n    } & OrientationParam = {}) => ({\n      pathname: `${PHOTOS_PATH_PREFIX}/random`,\n      query: compactDefined({\n        ...queryParams,\n        ...Query.getCollections(collectionIds),\n      }),\n      headers: {\n        /**\n         * Avoid response caching\n         */\n        'cache-control': 'no-cache',\n      },\n    }),\n  ),\n  handleResponse: castResponse<any>(),\n};\n\nexport const trackDownload = {\n  handleRequest: createRequestHandler(({ downloadLocation }: { downloadLocation: string }) => {\n    const { pathname, query } = parseQueryAndPathname(downloadLocation);\n\n    if (!isDefined(pathname)) {\n      throw new Error('Could not parse pathname from url.');\n    }\n    return { pathname, query: compactDefined(query) };\n  }),\n  handleResponse: castResponse<any>(),\n};\n","import { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport { ColorId, ContentFilter, Language, SearchOrderBy } from './types';\n\nexport type SearchParams = {\n  query: string;\n} & Pick<PaginationParams, 'page' | 'perPage'>;\n\nconst SEARCH_PATH_PREFIX = `/search`;\n\ntype SearchPhotosParams = SearchParams &\n  OrientationParam & {\n    /**\n     * API defaults to `\"relevant\"` if no value is provided\n     */\n    orderBy?: SearchOrderBy;\n    color?: ColorId;\n    /**\n     * API defaults to `en` (English) if no value is provided\n     */\n    lang?: Language;\n    /**\n     * API defaults to `\"low\"` if no value is provided\n     */\n    contentFilter?: ContentFilter;\n    collectionIds?: string[];\n  };\n\nexport const getPhotos = {\n  handleRequest: createRequestHandler(\n    ({\n      query,\n      page,\n      perPage,\n      orderBy,\n      collectionIds,\n      lang,\n      contentFilter,\n      ...filters\n    }: SearchPhotosParams) => ({\n      pathname: `${SEARCH_PATH_PREFIX}/photos`,\n      query: compactDefined({\n        query,\n        content_filter: contentFilter,\n        lang,\n        order_by: orderBy,\n        ...Query.getFeedParams({ page, perPage }),\n        ...Query.getCollections(collectionIds),\n        ...filters,\n      }),\n    }),\n  ),\n  handleResponse: castResponse<any>(),\n};\n\nexport const getCollections = {\n  handleRequest: createRequestHandler(({ query, ...paginationParams }: SearchParams) => ({\n    pathname: `${SEARCH_PATH_PREFIX}/collections`,\n    query: { query, ...Query.getFeedParams(paginationParams) },\n  })),\n  handleResponse: castResponse<any>(),\n};\n\nexport const getUsers = {\n  handleRequest: createRequestHandler(({ query, ...paginationParams }: SearchParams) => ({\n    pathname: `${SEARCH_PATH_PREFIX}/users`,\n    query: { query, ...Query.getFeedParams(paginationParams) },\n  })),\n  handleResponse: castResponse<any>(),\n};\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\n\ntype UserName = {\n  username: string;\n};\n\nconst USERS_PATH_PREFIX = '/users';\n\nexport const get = {\n  handleRequest: createRequestHandler(({ username }: UserName) => ({\n    pathname: `${USERS_PATH_PREFIX}/${username}`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n\nexport const getPhotos = {\n  handleRequest: createRequestHandler(\n    ({\n      username,\n      stats,\n      orientation,\n      ...paginationParams\n    }: {\n      stats?: boolean;\n    } & OrientationParam &\n      UserName &\n      PaginationParams) => ({\n      pathname: `${USERS_PATH_PREFIX}/${username}/photos`,\n      query: compactDefined({\n        ...Query.getFeedParams(paginationParams),\n        orientation,\n        stats,\n      }),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\n\nexport const getLikes = {\n  handleRequest: createRequestHandler(\n    ({\n      username,\n      orientation,\n      ...paginationParams\n    }: OrientationParam & UserName & PaginationParams) => ({\n      pathname: `${USERS_PATH_PREFIX}/${username}/likes`,\n      query: compactDefined({\n        ...Query.getFeedParams(paginationParams),\n        orientation,\n      }),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\nexport const getCollections = {\n  handleRequest: createRequestHandler(\n    ({ username, ...paginationParams }: UserName & PaginationParams) => ({\n      pathname: `${USERS_PATH_PREFIX}/${username}/collections`,\n      query: Query.getFeedParams(paginationParams),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\n","export const trackNonHotLinkedPhotoView = ({ appId }: { appId: string }) => ({\n  photoId,\n}: {\n  photoId: string | string[];\n}) => {\n  const ids = !Array.isArray(photoId) ? [photoId] : photoId;\n\n  if (ids.length > 20) {\n    throw new Error(\n      'You cannot track more than 20 photos at once. Please try again with fewer photos.',\n    );\n  }\n\n  return fetch(`views.unsplash.com/v?photo_id=${ids.join()}&app_id=${appId}`);\n};\n","export type SearchOrderBy = 'relevant' | 'latest';\n\nexport type ColorId =\n  | 'white'\n  | 'black'\n  | 'yellow'\n  | 'orange'\n  | 'red'\n  | 'purple'\n  | 'magenta'\n  | 'green'\n  | 'teal'\n  | 'blue'\n  | 'black_and_white';\n\nexport type ContentFilter = 'high' | 'low';\n\nexport enum Language {\n  Afrikaans = 'af',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Azerbaijani = 'az',\n  Belarusian = 'be',\n  Bulgarian = 'bg',\n  Bengali = 'bn',\n  Bosnian = 'bs',\n  Catalan = 'ca',\n  Cebuano = 'ceb',\n  Corsican = 'co',\n  Czech = 'cs',\n  Welsh = 'cy',\n  Danish = 'da',\n  German = 'de',\n  Greek = 'el',\n  English = 'en',\n  Esperanto = 'eo',\n  Spanish = 'es',\n  Estonian = 'et',\n  Basque = 'eu',\n  Persian = 'fa',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Irish = 'ga',\n  ScotsGaelic = 'gd',\n  Galician = 'gl',\n  Gujarati = 'gu',\n  Hausa = 'ha',\n  Hawaiian = 'haw',\n  Hindi = 'hi',\n  Hmong = 'hmn',\n  Croatian = 'hr',\n  HaitianCreole = 'ht',\n  Hungarian = 'hu',\n  Armenian = 'hy',\n  Indonesian = 'id',\n  Igbo = 'ig',\n  Icelandic = 'is',\n  Italian = 'it',\n  Hebrew = 'iw',\n  Japanese = 'ja',\n  Javanese = 'jw',\n  Georgian = 'ka',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Kannada = 'kn',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Latin = 'la',\n  Luxembourgish = 'lb',\n  Lao = 'lo',\n  Lithuanian = 'lt',\n  Latvian = 'lv',\n  Malagasy = 'mg',\n  Maori = 'mi',\n  Macedonian = 'mk',\n  Malayalam = 'ml',\n  Mongolian = 'mn',\n  Marathi = 'mr',\n  Malay = 'ms',\n  Maltese = 'mt',\n  Myanmar = 'my',\n  Nepali = 'ne',\n  Dutch = 'nl',\n  Norwegian = 'no',\n  Nyanja = 'ny',\n  Oriya = 'or',\n  Punjabi = 'pa',\n  Polish = 'pl',\n  Pashto = 'ps',\n  Portuguese = 'pt',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Kinyarwanda = 'rw',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Samoan = 'sm',\n  Shona = 'sn',\n  Somali = 'so',\n  Albanian = 'sq',\n  Serbian = 'sr',\n  Sesotho = 'st',\n  Sundanese = 'su',\n  Swedish = 'sv',\n  Swahili = 'sw',\n  Tamil = 'ta',\n  Telugu = 'te',\n  Tajik = 'tg',\n  Thai = 'th',\n  Turkmen = 'tk',\n  Filipino = 'tl',\n  Turkish = 'tr',\n  Tatar = 'tt',\n  Uighur = 'ug',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  ChineseSimplified = 'zh',\n  ChineseTraditional = 'zh-TW',\n  Zulu = 'zu',\n}\n","export enum OrderBy {\n  LATEST = 'latest',\n  POPULAR = 'popular',\n  OLDEST = 'oldest',\n}\nexport type Orientation = 'landscape' | 'portrait' | 'squarish';\nexport type OrientationParam = {\n  orientation?: Orientation;\n};\n\nexport type PaginationParams = {\n  /**\n   * API defaults to `10` if no value is provided\n   */\n  perPage?: number;\n  /**\n   * API defaults to `1` if no value is provided\n   */\n  page?: number;\n  /**\n   * API defaults to `\"latest\"` if no value is provided\n   */\n  orderBy?: OrderBy;\n};\n","import { flow } from './helpers/fp';\nimport { initMakeRequest } from './helpers/request';\nimport * as collections from './methods/collections';\nimport * as photos from './methods/photos';\nimport * as search from './methods/search';\nimport * as users from './methods/users';\n\nimport * as _internals from './internals';\n\nexport const createApi = flow(initMakeRequest, makeRequest => ({\n  photos: {\n    get: makeRequest(photos.get),\n    list: makeRequest(photos.list),\n    getStats: makeRequest(photos.getStats),\n    getRandom: makeRequest(photos.getRandom),\n    trackDownload: makeRequest(photos.trackDownload),\n  },\n  users: {\n    getPhotos: makeRequest(users.getPhotos),\n    getCollections: makeRequest(users.getCollections),\n    getLikes: makeRequest(users.getLikes),\n    get: makeRequest(users.get),\n  },\n  search: {\n    getCollections: makeRequest(search.getCollections),\n    getPhotos: makeRequest(search.getPhotos),\n    getUsers: makeRequest(search.getUsers),\n  },\n  collections: {\n    getPhotos: makeRequest(collections.getPhotos),\n    get: makeRequest(collections.get),\n    list: makeRequest(collections.list),\n    getRelated: makeRequest(collections.getRelated),\n  },\n}));\n\nexport { Language, ColorId, ContentFilter, SearchOrderBy } from './methods/search/types';\nexport { OrderBy, Orientation } from './types/request';\nexport { _internals };\n"],"names":["checkIsString","getRefinement","value","isDefined","x","undefined","getB","a","checkIsNonEmptyArray","length","compactDefined","obj","Object","keys","reduce","acc","key","flow","fns","len","y","apply","i","call","checkIsObject","response","Array","isArray","checkIsErrors","errors","every","checkIsApiError","getErrorForBadStatusCode","jsonResponse","source","DecodingError","message","CONTENT_TYPE_RESPONSE_HEADER","CONTENT_TYPE_JSON","checkIsJsonResponse","contentTypeHeader","headers","get","ContentTypeHelpers","type","getJsonResponse","json","_err","handleFetchResponse","handleResponse","ok","then","handledResponse","status","error","castResponse","addQueryToUrl","query","url","forEach","queryKey","searchParams","set","toString","addPathnameToUrl","pathname","buildUrl","apiUrl","URL","parseQueryAndPathname","createRequestHandler","fn","additionalFetchOptions","baseReqParams","initMakeRequest","accessKey","apiVersion","generalHeaders","providedFetch","fetch","generalFetchOptions","handleRequest","method","endpointHeaders","body","signal","fetchOptions","Authorization","fetchToUse","TOTAL_RESPONSE_HEADER","getTotalFromApiFeedResponse","totalsStr","total","parseInt","Number","isInteger","handleFeedResponse","results","getCollections","collectionIds","collections","join","getFeedParams","page","perPage","orderBy","per_page","order_by","COLLECTIONS_PATH_PREFIX","getPhotos","collectionId","orientation","paginationParams","Query","list","getRelated","PHOTOS_PATH_PREFIX","feedParams","photoId","getStats","getRandom","queryParams","trackDownload","downloadLocation","Error","SEARCH_PATH_PREFIX","lang","contentFilter","filters","content_filter","getUsers","USERS_PATH_PREFIX","username","stats","getLikes","trackNonHotLinkedPhotoView","appId","ids","Language","OrderBy","createApi","makeRequest","photos","users","search"],"mappings":"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"}