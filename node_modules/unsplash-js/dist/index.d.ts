import * as search from './methods/search';
import * as _internals from './internals';
export declare const createApi: (args: ({
    apiVersion?: string | undefined;
    fetch?: typeof fetch | undefined;
} & Pick<RequestInit, "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> & {
    accessKey: string;
    apiUrl?: undefined;
}) | ({
    apiVersion?: string | undefined;
    fetch?: typeof fetch | undefined;
} & Pick<RequestInit, "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> & {
    apiUrl: string;
    accessKey?: undefined;
})) => {
    photos: {
        get: (a: {
            photoId: string;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
        list: (a: import("./types/request").PaginationParams | undefined, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<{
            results: any[];
            total: number;
        }>>;
        getStats: (a: {
            photoId: string;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
        getRandom: (a: ({
            collectionIds?: string[] | undefined;
            featured?: boolean | undefined;
            username?: string | undefined;
            query?: string | undefined;
            count?: number | undefined;
        } & import("./types/request").OrientationParam) | undefined, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
        trackDownload: (a: {
            downloadLocation: string;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
    };
    users: {
        getPhotos: (a: {
            stats?: boolean | undefined;
        } & import("./types/request").OrientationParam & {
            username: string;
        } & import("./types/request").PaginationParams, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<{
            results: any[];
            total: number;
        }>>;
        getCollections: (a: {
            username: string;
        } & import("./types/request").PaginationParams, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<{
            results: any[];
            total: number;
        }>>;
        getLikes: (a: import("./types/request").OrientationParam & {
            username: string;
        } & import("./types/request").PaginationParams, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<{
            results: any[];
            total: number;
        }>>;
        get: (a: {
            username: string;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
    };
    search: {
        getCollections: (a: search.SearchParams, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
        getPhotos: (a: {
            query: string;
        } & Pick<import("./types/request").PaginationParams, "page" | "perPage"> & import("./types/request").OrientationParam & {
            orderBy?: "relevant" | "latest" | undefined;
            color?: "white" | "black" | "yellow" | "orange" | "red" | "purple" | "magenta" | "green" | "teal" | "blue" | "black_and_white" | undefined;
            lang?: import("./methods/search/types").Language | undefined;
            contentFilter?: "high" | "low" | undefined;
            collectionIds?: string[] | undefined;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
        getUsers: (a: search.SearchParams, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
    };
    collections: {
        getPhotos: (a: {
            collectionId: string;
        } & import("./types/request").PaginationParams & import("./types/request").OrientationParam, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<{
            results: any[];
            total: number;
        }>>;
        get: (a: {
            collectionId: string;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
        list: (a: Pick<import("./types/request").PaginationParams, "page" | "perPage"> | undefined, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<{
            results: any[];
            total: number;
        }>>;
        getRelated: (a: {
            collectionId: string;
        }, additionalFetchOptions?: Pick<RequestInit, "body" | "cache" | "credentials" | "headers" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => Promise<import("./helpers/response").ApiResponse<any>>;
    };
};
export { Language, ColorId, ContentFilter, SearchOrderBy } from './methods/search/types';
export { OrderBy, Orientation } from './types/request';
export { _internals };
