import { ApiResponse, HandleResponse } from './response';
import { OmitStrict } from './typescript';
import { BuildUrlParams } from './url';
declare type FetchParams = Pick<RequestInit, 'method'>;
/**
 * The params generated by the library
 */
declare type BaseRequestParams = BuildUrlParams & FetchParams & Pick<RequestInit, 'headers'>;
/**
 * Additional fetch options provided by the user on a per-call basis
 */
declare type AdditionalPerFetchParams = Omit<RequestInit, keyof FetchParams>;
export declare type CompleteRequestParams = BaseRequestParams & AdditionalPerFetchParams;
declare type HandleRequest<Args> = (a: Args, additionalFetchOptions?: AdditionalPerFetchParams) => CompleteRequestParams;
/**
 * helper used to type-check the arguments, and add default params for all requests
 */
export declare const createRequestHandler: <Args>(fn: (a: Args) => BaseRequestParams) => HandleRequest<Args>;
/**
 * Initial parameters that apply to all calls
 */
declare type InitParams = {
    apiVersion?: string;
    fetch?: typeof fetch;
} & OmitStrict<RequestInit, 'method' | 'body'> & ({
    accessKey: string;
    apiUrl?: never;
} | {
    apiUrl: string;
    accessKey?: never;
});
declare type RequestGenerator<Args, ResponseType> = {
    handleRequest: HandleRequest<Args>;
    handleResponse: HandleResponse<ResponseType>;
};
declare type GeneratedRequestFunction<Args, ResponseType> = (...a: Parameters<HandleRequest<Args>>) => Promise<ApiResponse<ResponseType>>;
declare type InitMakeRequest = (args: InitParams) => <Args, ResponseType>(handlers: RequestGenerator<Args, ResponseType>) => GeneratedRequestFunction<Args, ResponseType>;
export declare const initMakeRequest: InitMakeRequest;
export {};
