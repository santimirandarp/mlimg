import { OrientationParam, PaginationParams } from '../../types/request';
declare type PhotoId = {
    photoId: string;
};
export declare const list: {
    handleRequest: (a: PaginationParams | undefined, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        results: any[];
        total: number;
    }>;
};
export declare const get: {
    handleRequest: (a: PhotoId, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<any>;
};
export declare const getStats: {
    handleRequest: (a: PhotoId, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<any>;
};
export declare const getRandom: {
    handleRequest: (a: ({
        collectionIds?: string[] | undefined;
        featured?: boolean | undefined;
        username?: string | undefined;
        query?: string | undefined;
        count?: number | undefined;
    } & OrientationParam) | undefined, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<any>;
};
export declare const trackDownload: {
    handleRequest: (a: {
        downloadLocation: string;
    }, additionalFetchOptions?: Pick<RequestInit, "headers" | "body" | "cache" | "credentials" | "integrity" | "keepalive" | "mode" | "redirect" | "referrer" | "referrerPolicy" | "signal" | "window"> | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<any>;
};
export {};
